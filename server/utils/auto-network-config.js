const os = require("os");
const fs = require("fs");
const path = require("path");

/**
 * Automatically detect network IP and update client configuration
 */
class AutoNetworkConfig {
  constructor() {
    this.clientEnvPath = path.join(__dirname, "../../client/.env.local");
    this.clientMainEnvPath = path.join(__dirname, "../../client/.env");
  }

  /**
   * Get the current network IP address (excluding localhost)
   */
  getCurrentIP() {
    const interfaces = os.networkInterfaces();

    // Priority order for interface types
    const interfacePriority = ["en0", "eth0", "wlan0", "en1", "en2"];

    // First, try priority interfaces
    for (const interfaceName of interfacePriority) {
      if (interfaces[interfaceName]) {
        for (const iface of interfaces[interfaceName]) {
          if (iface.family === "IPv4" && !iface.internal) {
            return iface.address;
          }
        }
      }
    }

    // Fallback: find any non-internal IPv4 address
    for (const interfaceName of Object.keys(interfaces)) {
      for (const iface of interfaces[interfaceName]) {
        if (iface.family === "IPv4" && !iface.internal) {
          return iface.address;
        }
      }
    }

    // Last resort: use localhost
    return "127.0.0.1";
  }

  /**
   * Update client .env.local file with current IP
   */
  updateClientConfig(ip) {
    // Use dynamic configuration that works with proxy
    const envLocalContent = `# Auto-generated by server startup - DO NOT EDIT MANUALLY
REACT_APP_SERVER_HOST=${ip}
# REACT_APP_API_URL set in .env.production for production builds
REACT_APP_CURRENT_NETWORK_IP=${ip}
`;

    // Main .env uses localhost and proxy for development
    const envMainContent = `# Auto-generated by server startup - DO NOT EDIT MANUALLY
HOST=0.0.0.0
PORT=3000
GENERATE_SOURCEMAP=true
FAST_REFRESH=true
WDS_SOCKET_HOST=localhost
WDS_SOCKET_PORT=3000
WDS_SOCKET_PATH=/ws
CHOKIDAR_USEPOLLING=true
SKIP_PREFLIGHT_CHECK=true
REACT_APP_WDS_SOCKET_HOST=localhost
REACT_APP_WDS_SOCKET_PORT=3000
# REACT_APP_API_URL set in .env.production for production builds
REACT_APP_DEV_MODE=true
REACT_APP_CURRENT_NETWORK_IP=${ip}
REACT_APP_SERVER_PORT=5001
`;

    try {
      // Ensure client directory exists
      const clientDir = path.dirname(this.clientEnvPath);
      if (!fs.existsSync(clientDir)) {
        fs.mkdirSync(clientDir, { recursive: true });
      }

      // Write the new .env.local configuration
      fs.writeFileSync(this.clientEnvPath, envLocalContent);

      // Write the new .env configuration
      fs.writeFileSync(this.clientMainEnvPath, envMainContent);

      console.log(`✅ Updated client configuration with IP: ${ip}`);
      console.log(
        `📡 Client will use proxy for API calls and WebSocket for localhost`
      );
      return true;
    } catch (error) {
      console.error(`❌ Failed to update client configuration:`, error.message);
      return false;
    }
  }

  /**
   * Initialize network configuration
   */
  initialize() {
    const currentIP = this.getCurrentIP();
    console.log(`🌐 Detected network IP: ${currentIP}`);

    // Update client configuration
    this.updateClientConfig(currentIP);

    return currentIP;
  }

  /**
   * Watch for network changes (optional, for future enhancement)
   */
  watchNetworkChanges() {
    let lastIP = this.getCurrentIP();

    setInterval(() => {
      const currentIP = this.getCurrentIP();
      if (currentIP !== lastIP) {
        console.log(`🔄 Network IP changed from ${lastIP} to ${currentIP}`);
        console.log(`📝 Updating client configuration files...`);
        this.updateClientConfig(currentIP);
        lastIP = currentIP;

        // Notify about restart requirement
        console.log(
          `⚠️  Client restart recommended to pick up new network configuration`
        );
      }
    }, 10000); // Check every 10 seconds
  }
}

module.exports = AutoNetworkConfig;
